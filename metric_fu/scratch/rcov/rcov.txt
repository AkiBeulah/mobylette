** WARNING: Ruby 1.9 Support is experimental at best. Don't expect correct results! **
.............................................

Finished in 0.94567 seconds
45 examples, 0 failures
================================================================================
lib/mobylette.rb
================================================================================
!! #
!! # Rails automatic mobile request support
!! module Mobylette
     module Controllers
       autoload "RespondToMobileRequests", "mobylette/controllers/respond_to_mobile_requests"
       autoload "Helpers"                , "mobylette/controllers/helpers"
     end
   
!!   # TestHelpers
!!   autoload "Helmet"                   , "mobylette/helmet"
   
!!   require 'mobylette/railtie'
   end
   
!! # Creating the :mobile format alias
!! require 'action_controller'
   Mime::Type.register_alias "text/html", :mobile
================================================================================
lib/mobylette/helmet.rb
================================================================================
!! module Mobylette
     # Mobylette::Helmet provides helper methods to help you when testing your controllers
!!   # for a mobile request.
!!   #
!!   # You must include Mobylette::Helmet into your test case, in the README there is more
!!   # documentation about how to make this test wide.
!!   module Helmet
       extend ActiveSupport::Concern
       autoload "Helpers", "mobylette/helmet/helpers"
       autoload "Faker"  , "mobylette/helmet/faker"
   
!!     # Force the request for the user_agent
!!     #
!!     # Remember to add it BEFORE the request
!!     #
!!     # Example:
!!     #
!!     #   it "should render the mobile_device view on mobile request" do
!!     #     force_mobile_request_agent("Android")
!!     #     get :index
!!     #     response.should render_template(:mobile_device)
!!     #   end
!!     def force_mobile_request_agent(user_agent = "Android")
         request.user_agent = user_agent
       end
   
!!     # Reset the user_aget to the default ("Rails Testing")
!!     #
!!     # Remember to add it BEFORE the request
!!     #
!!     # Example:
!!     #
!!     #   it "should render the normal_view view on mobile request" do
!!     #     reset_test_request_agent
!!     #     get :index
!!     #     response.should render_template(:normal_view)
!!     #   end
!!     def reset_test_request_agent
         request.user_agent = "Rails Testing"
       end
   
!!     # set_session_override will set the 'value' to the session override control
!!     # value may be:
!!     # * :ignore_mobile  -> This will disable mobile checking, and the original format will be rendered
!!     # * :force_mobile   -> This will force to all requests for this session be mobile (except xhr)
!!     # * nil             -> This will disable session override
!!     def set_session_override(value)
         session[:mobylette_override] = value
       end
   
     end
   end
================================================================================
lib/mobylette/controllers/respond_to_mobile_requests.rb
================================================================================
!! module Mobylette
     module Controllers
   
!!     # Mobylette::Controllers::RespondToMobileRequests includes the respond_to_mobile_requests
!!     # to your ActionController::Base.
!!     #
!!     # The respond_to_mobile_requests method enables the controller mobile handling
!!     module RespondToMobileRequests
         extend ActiveSupport::Concern
   
         included do
           helper_method :is_mobile_request?
           helper_method :is_mobile_view?
   
           # List of mobile agents, from mobile_fu (https://github.com/brendanlim/mobile-fu)
           MOBILE_USER_AGENTS =  'palm|blackberry|nokia|phone|midp|mobi|symbian|chtml|ericsson|minimo|' +
                                 'audiovox|motorola|samsung|telit|upg1|windows ce|ucweb|astel|plucker|' +
                                 'x320|x240|j2me|sgh|portable|sprint|docomo|kddi|softbank|android|mmp|' +
                                 'pdxgw|netfront|xiino|vodafone|portalmmm|sagem|mot-|sie-|ipod|up\\.b|' +
                                 'webos|amoi|novarra|cdm|alcatel|pocket|iphone|mobileexplorer|mobile'
         end
!! 
!!       module ClassMethods
   
!!         # This method enables the controller do handle mobile requests
!!         #
!!         # You must add this to every controller you want to respond differently to mobile devices,
!!         # or make it application wide calling it from the ApplicationController
!!         #
!!         # Options:
!!         # * :fall_back => :html
!!         #     You may pass a fall_back option to the method, it will force the render
!!         #     to look for that other format, in case there is not a .mobile file for the view.
!!         #     By default, it will fall back to the format of the original request.
!!         #     If you don't want fall back at all, pass :fall_back => false
!!         # * :skip_xhr_requests => true/false
!!         #     By default this is set to true. When a xhr request enters in, it will skip the
!!         #     mobile verification. This will let your ajax calls to work as intended.
!!         #     You may disable this (actually you will have to) if you are using JQuery Mobile, or
!!         #     other js framework that uses ajax. To disable, set :skip_xhr_requests => false
!!         def respond_to_mobile_requests(options = {})
             return if self.included_modules.include?(Mobylette::Controllers::RespondToMobileRequestsMethods)
   
             options.reverse_merge!({
               :skip_xhr_requests        => true
             })
!! 
!!           cattr_accessor :mobylette_options
             # works on 1.9, but not on 1.8
!!           #valid_options = [:fall_back, :skip_xhr_requests]
!!           #self.mobylette_options = options.reject {|option| !valid_options.include?(option)}
!!           self.mobylette_options = options
   
!!           self.send(:include, Mobylette::Controllers::RespondToMobileRequestsMethods)
           end
         end
   
!!       module InstanceMethods
   
!!         private
   
!!         # :doc:
!!         # This helper returns exclusively if the request's  user_aget is from a mobile
!!         # device or not.
!!         def is_mobile_request?
             request.user_agent.to_s.downcase =~ /#{MOBILE_USER_AGENTS}/
           end
   
!!         # :doc:
!!         # This helper returns exclusively if the current format is mobile or not
!!         def is_mobile_view?
             true if (request.format.to_s == "mobile") or (params[:format] == "mobile")
           end
         end
       end
   
!!     # RespondToMobileRequestsMethods is included by respond_to_mobile_requests
!!     #
!!     # This will check if the request is from a mobile device and change
!!     # the request format to :mobile
!!     module RespondToMobileRequestsMethods
         extend ActiveSupport::Concern
   
         included do
           before_filter :handle_mobile
         end
!! 
!!       module InstanceMethods
           private
   
!!         # Returns true if this request should be treated as a mobile request
!!         def respond_as_mobile?
             processing_xhr_requests? and skip_mobile_param_not_present? and (force_mobile_by_session? or is_mobile_request? or (params[:format] == 'mobile'))
           end
   
!!         # Returns true if the visitor has de force_mobile session
!!         def force_mobile_by_session?
             session[:mobylette_override] == :force_mobile
           end
   
!!         # Returns true when ?skip_mobile=true is not passed to the request
!!         def skip_mobile_param_not_present?
             params[:skip_mobile] != 'true'
           end
   
!!         # Returns true only if treating XHR requests (when skip_xhr_requests are set to false) or
!!         # or when this is a non xhr request
!!         def processing_xhr_requests?
             not self.mobylette_options[:skip_xhr_requests] && request.xhr?
           end
   
!!         # :doc:
!!         # Changes the request.form to :mobile, when the request is from
!!         # a mobile device
!!         def handle_mobile
             return if session[:mobylette_override] == :ignore_mobile
             if respond_as_mobile?
   
!!             original_format   = request.format.to_sym
               request.format    = :mobile
               if self.mobylette_options[:fall_back] != false
                 request.formats << Mime::Type.new(self.mobylette_options[:fall_back] || original_format)
               end
             end
           end
   
         end
       end
     end
   end
================================================================================
lib/mobylette/controllers/helpers.rb
================================================================================
!! module Mobylette
     module Controllers
   
!!     # Mobylette::Controllers::Helpers include few methods to
!!     # include different css/js files for the mobile and for
!!     # the normal version of your layout
!!     #
!!     # Personal notes:
!!     # * I'm rethinking and I guess that, since you
!!     #   may have (and probably will) a different layout file for the
!!     #   "normal" and mobile version, you probably wont use this at all.
!!     # * Also I'm not sure it's the case of using 'is_mobile_request?'
!!     #   or 'is_mobile_view?' check here.'
!!     module Helpers
         extend ActiveSupport::Concern
   
!!       # Adds a "_mobile" sulfix to the files you include (when the request is mobile)
!!       def mobylette_stylesheet_link_tag(*sources)
           options = sources.extract_options!
           if is_mobile_request?
             stylesheet_link_tag(*sulfix_mobile_assets(sources, :css).insert(-1, options))
           else
!!           stylesheet_link_tag(*sources.insert(-1, options))
           end
         end
   
!!       # Adds a "_mobile" sulfix to the files you include (when the request is mobile)
!!       def mobylette_javascript_include_tag(*sources)
           options = sources.extract_options!
           if is_mobile_request?
             javascript_include_tag(*sulfix_mobile_assets(sources, :js).insert(-1, options))
           else
!!           javascript_include_tag(*sources.insert(-1, options))
           end
         end
   
!!       private
   
!!       # Anex the "_mobile" sulfix to each string in the array,
!!       # before the .#{extension}, if it exists
!!       def sulfix_mobile_assets(sources, extension)
           sources.map do |source|
             if source =~ /.#{extension}/
               "#{source.split(/.#{extension}$/)[0]}_mobile.#{extension}"
             else
!!             "#{source}_mobile"
             end
           end
         end
       end
   
     end
   end
================================================================================
lib/mobylette/helmet/helpers.rb
================================================================================
!! module Mobylette
     module Helmet
       # This module is only for testing the view's helpers of the module
!!     # it simulates the Helmet helpers and the controller methods
!!     # that are necessary for the tests
!!     module Helpers
         extend ActiveSupport::Concern
   
         included do
           cattr_accessor :user_agent
         end
!! 
!!       # Force the request to be a mobile request
!!       def force_mobile_request_agent
           insert_faker
           ActionController::Base.is_mobile_request = true
         end
   
!!       # Reset the request mobile agent of the request
!!       def reset_test_request_agent
           insert_faker
           ActionController::Base.is_mobile_request = false
         end
   
!!       private
   
!!       # includes the faker module for faking mobile requests
!!       def insert_faker
           return if ActionController::Base.included_modules.include?(Mobylette::Helmet::Faker)
           ActionController::Base.send(:include, Mobylette::Helmet::Faker)
         end
   
   
       end
     end
   end
================================================================================
lib/mobylette/helmet/faker.rb
================================================================================
!! module Mobylette
     module Helmet
   
!!     # Forces the helper to think that all requests come
!!     # from a mobile device
!!     module Faker
         extend ActiveSupport::Concern
   
         included do
           cattr_accessor :is_mobile_request
         end
!! 
!!       def is_mobile_request?
           is_mobile_request
         end
   
       end
     end
   end
================================================================================
lib/mobylette/railtie.rb
================================================================================
!! module Mobylette
     # Gem's Configuration as Railtie
!!   #
!!   # Automatic inlcudes Mobylette::Controllers::RespondToMobileRequests to ActiveController::Base and
!!   # load Mobylette::Controllers::Helpers as ActionController::Base helpers
!!   class Railtie < ::Rails::Railtie
       initializer :mobylette do
         ActiveSupport.on_load(:action_controller) do
           ::ActionController::Base.send(:include, Mobylette::Controllers::RespondToMobileRequests)
           ::ActionController::Base.helper Mobylette::Controllers::Helpers
         end
       end
     end
   end
